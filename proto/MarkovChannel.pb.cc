// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarkovChannel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MarkovChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MarkovChannel {

namespace {

const ::google::protobuf::Descriptor* ProtocolParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolStep_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolStep_StepType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolverParameter_SimulationMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModelParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GAParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GAParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GAParameter_SelectionMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SAParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SAParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransitionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransitionParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MarkovChannel_2eproto() {
  protobuf_AddDesc_MarkovChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MarkovChannel.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolParameter_descriptor_ = file->message_type(0);
  static const int ProtocolParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, v0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, step_),
  };
  ProtocolParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolParameter_descriptor_,
      ProtocolParameter::default_instance_,
      ProtocolParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolParameter));
  ProtocolStep_descriptor_ = file->message_type(1);
  static const int ProtocolStep_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, vm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, conductance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, fluorimetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, normalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, prm1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, prm2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, stepsize_),
  };
  ProtocolStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolStep_descriptor_,
      ProtocolStep::default_instance_,
      ProtocolStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolStep));
  ProtocolStep_StepType_descriptor_ = ProtocolStep_descriptor_->enum_type(0);
  SolverParameter_descriptor_ = file->message_type(2);
  static const int SolverParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, simulation_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, model_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, ga_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, sa_param_),
  };
  SolverParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParameter_descriptor_,
      SolverParameter::default_instance_,
      SolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParameter));
  SolverParameter_SolverMode_descriptor_ = SolverParameter_descriptor_->enum_type(0);
  SolverParameter_SimulationMode_descriptor_ = SolverParameter_descriptor_->enum_type(1);
  ModelParameter_descriptor_ = file->message_type(3);
  static const int ModelParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, min_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, max_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, n_prms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, mutation_),
  };
  ModelParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelParameter_descriptor_,
      ModelParameter::default_instance_,
      ModelParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelParameter));
  MutationParameter_descriptor_ = file->message_type(4);
  static const int MutationParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, add_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, add_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, rm_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, rm_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, std_),
  };
  MutationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutationParameter_descriptor_,
      MutationParameter::default_instance_,
      MutationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutationParameter));
  GAParameter_descriptor_ = file->message_type(5);
  static const int GAParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, n_subpopulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, population_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, migration_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, reproduction_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, selection_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, mutation_param_),
  };
  GAParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GAParameter_descriptor_,
      GAParameter::default_instance_,
      GAParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GAParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GAParameter));
  GAParameter_SelectionMode_descriptor_ = GAParameter_descriptor_->enum_type(0);
  SAParameter_descriptor_ = file->message_type(6);
  static const int SAParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAParameter, k_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAParameter, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAParameter, transition_param_),
  };
  SAParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SAParameter_descriptor_,
      SAParameter::default_instance_,
      SAParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SAParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SAParameter));
  TransitionParameter_descriptor_ = file->message_type(7);
  static const int TransitionParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, add_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, add_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, remove_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, shift_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, fixed_model_),
  };
  TransitionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransitionParameter_descriptor_,
      TransitionParameter::default_instance_,
      TransitionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransitionParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MarkovChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolParameter_descriptor_, &ProtocolParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolStep_descriptor_, &ProtocolStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParameter_descriptor_, &SolverParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelParameter_descriptor_, &ModelParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutationParameter_descriptor_, &MutationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GAParameter_descriptor_, &GAParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SAParameter_descriptor_, &SAParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransitionParameter_descriptor_, &TransitionParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MarkovChannel_2eproto() {
  delete ProtocolParameter::default_instance_;
  delete ProtocolParameter_reflection_;
  delete ProtocolStep::default_instance_;
  delete ProtocolStep_reflection_;
  delete SolverParameter::default_instance_;
  delete SolverParameter_reflection_;
  delete ModelParameter::default_instance_;
  delete ModelParameter_reflection_;
  delete MutationParameter::default_instance_;
  delete MutationParameter_reflection_;
  delete GAParameter::default_instance_;
  delete GAParameter_reflection_;
  delete SAParameter::default_instance_;
  delete SAParameter_reflection_;
  delete TransitionParameter::default_instance_;
  delete TransitionParameter_reflection_;
}

void protobuf_AddDesc_MarkovChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MarkovChannel.proto\022\rMarkovChannel\"\210\001\n"
    "\021ProtocolParameter\022\014\n\004name\030\001 \002(\t\022\016\n\006sour"
    "ce\030\002 \001(\t\022\020\n\002v0\030\003 \001(\001:\004-120\022\030\n\013temperatur"
    "e\030\004 \001(\001:\003293\022)\n\004step\030\005 \003(\0132\033.MarkovChann"
    "el.ProtocolStep\"\225\002\n\014ProtocolStep\022\n\n\002dt\030\001"
    " \001(\001\022\n\n\002vm\030\002 \001(\001\022\023\n\013conductance\030\003 \001(\010\022\023\n"
    "\013fluorimetry\030\004 \001(\010\0229\n\005stype\030\005 \001(\0162$.Mark"
    "ovChannel.ProtocolStep.StepType:\004NONE\022\027\n"
    "\tnormalize\030\006 \001(\010:\004true\022\021\n\004prm1\030\007 \001(\001:\0030."
    "1\022\021\n\004prm2\030\010 \001(\001:\0030.9\022\025\n\010stepsize\030\t \001(\001:\003"
    "0.1\"2\n\010StepType\022\010\n\004NONE\020\000\022\010\n\004PEAK\020\001\022\007\n\003T"
    "AU\020\002\022\t\n\005TRACE\020\003\"\276\003\n\017SolverParameter\022Q\n\013s"
    "olver_mode\030\001 \001(\0162).MarkovChannel.SolverP"
    "arameter.SolverMode:\021GENETIC_ALGORITHM\022K"
    "\n\017simulation_mode\030\002 \001(\0162-.MarkovChannel."
    "SolverParameter.SimulationMode:\003ODE\0222\n\013m"
    "odel_param\030\003 \002(\0132\035.MarkovChannel.ModelPa"
    "rameter\022\030\n\tmax_iters\030\004 \001(\005:\00510000\022,\n\010ga_"
    "param\030\005 \001(\0132\032.MarkovChannel.GAParameter\022"
    ",\n\010sa_param\030\006 \001(\0132\032.MarkovChannel.SAPara"
    "meter\"<\n\nSolverMode\022\025\n\021GENETIC_ALGORITHM"
    "\020\000\022\027\n\023SIMULATED_ANNEALING\020\001\"#\n\016Simulatio"
    "nMode\022\007\n\003ODE\020\000\022\010\n\004EXPM\020\001\"\245\001\n\016ModelParame"
    "ter\022\025\n\nmin_states\030\001 \001(\005:\0013\022\026\n\nmax_states"
    "\030\002 \001(\005:\00210\022\021\n\006n_prms\030\003 \001(\005:\0012\022\r\n\002mu\030\004 \001("
    "\001:\0010\022\016\n\003std\030\005 \001(\001:\0011\0222\n\010mutation\030\006 \002(\0132 "
    ".MarkovChannel.MutationParameter\"k\n\021Muta"
    "tionParameter\022\020\n\010add_edge\030\001 \001(\001\022\020\n\010add_n"
    "ode\030\002 \001(\001\022\017\n\007rm_edge\030\003 \001(\001\022\017\n\007rm_node\030\004 "
    "\001(\001\022\020\n\003std\030\005 \001(\001:\0030.1\"\371\002\n\013GAParameter\022\033\n"
    "\020n_subpopulations\030\001 \001(\005:\0018\022\034\n\017population"
    "_size\030\002 \001(\005:\003100\022\034\n\016migration_rate\030\003 \001(\001"
    ":\0040.01\022\036\n\021reproduction_rate\030\004 \001(\001:\0030.5\022L"
    "\n\016selection_mode\030\005 \001(\0162(.MarkovChannel.G"
    "AParameter.SelectionMode:\nTOURNAMENT\022:\n\016"
    "mutation_param\030\006 \001(\0132\".MarkovChannel.Tra"
    "nsitionParameter\"g\n\rSelectionMode\022\016\n\nTOU"
    "RNAMENT\020\000\022\021\n\rPROPORTIONATE\020\001\022\016\n\nSTOCHAST"
    "IC\020\002\022\013\n\007UNIFORM\020\003\022\014\n\010ROULETTE\020\004\022\010\n\004RANK\020"
    "\005\"t\n\013SAParameter\022\022\n\005k_max\030\001 \001(\005:\003100\022\023\n\005"
    "gamma\030\002 \001(\001:\0040.01\022<\n\020transition_param\030\003 "
    "\001(\0132\".MarkovChannel.TransitionParameter\""
    "\201\001\n\023TransitionParameter\022\021\n\tadd_state\030\001 \001"
    "(\001\022\020\n\010add_edge\030\002 \001(\001\022\023\n\013remove_edge\030\003 \001("
    "\001\022\024\n\014shift_params\030\004 \001(\001\022\032\n\013fixed_model\030\005"
    " \001(\010:\005false", 1811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MarkovChannel.proto", &protobuf_RegisterTypes);
  ProtocolParameter::default_instance_ = new ProtocolParameter();
  ProtocolStep::default_instance_ = new ProtocolStep();
  SolverParameter::default_instance_ = new SolverParameter();
  ModelParameter::default_instance_ = new ModelParameter();
  MutationParameter::default_instance_ = new MutationParameter();
  GAParameter::default_instance_ = new GAParameter();
  SAParameter::default_instance_ = new SAParameter();
  TransitionParameter::default_instance_ = new TransitionParameter();
  ProtocolParameter::default_instance_->InitAsDefaultInstance();
  ProtocolStep::default_instance_->InitAsDefaultInstance();
  SolverParameter::default_instance_->InitAsDefaultInstance();
  ModelParameter::default_instance_->InitAsDefaultInstance();
  MutationParameter::default_instance_->InitAsDefaultInstance();
  GAParameter::default_instance_->InitAsDefaultInstance();
  SAParameter::default_instance_->InitAsDefaultInstance();
  TransitionParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MarkovChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MarkovChannel_2eproto {
  StaticDescriptorInitializer_MarkovChannel_2eproto() {
    protobuf_AddDesc_MarkovChannel_2eproto();
  }
} static_descriptor_initializer_MarkovChannel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtocolParameter::kNameFieldNumber;
const int ProtocolParameter::kSourceFieldNumber;
const int ProtocolParameter::kV0FieldNumber;
const int ProtocolParameter::kTemperatureFieldNumber;
const int ProtocolParameter::kStepFieldNumber;
#endif  // !_MSC_VER

ProtocolParameter::ProtocolParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.ProtocolParameter)
}

void ProtocolParameter::InitAsDefaultInstance() {
}

ProtocolParameter::ProtocolParameter(const ProtocolParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.ProtocolParameter)
}

void ProtocolParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v0_ = -120;
  temperature_ = 293;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolParameter::~ProtocolParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.ProtocolParameter)
  SharedDtor();
}

void ProtocolParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void ProtocolParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolParameter_descriptor_;
}

const ProtocolParameter& ProtocolParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

ProtocolParameter* ProtocolParameter::default_instance_ = NULL;

ProtocolParameter* ProtocolParameter::New() const {
  return new ProtocolParameter;
}

void ProtocolParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    v0_ = -120;
    temperature_ = 293;
  }
  step_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.ProtocolParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_v0;
        break;
      }

      // optional double v0 = 3 [default = -120];
      case 3: {
        if (tag == 25) {
         parse_v0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v0_)));
          set_has_v0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_temperature;
        break;
      }

      // optional double temperature = 4 [default = 293];
      case 4: {
        if (tag == 33) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_step;
        break;
      }

      // repeated .MarkovChannel.ProtocolStep step = 5;
      case 5: {
        if (tag == 42) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_step;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.ProtocolParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.ProtocolParameter)
  return false;
#undef DO_
}

void ProtocolParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.ProtocolParameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // optional double v0 = 3 [default = -120];
  if (has_v0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v0(), output);
  }

  // optional double temperature = 4 [default = 293];
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // repeated .MarkovChannel.ProtocolStep step = 5;
  for (int i = 0; i < this->step_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->step(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.ProtocolParameter)
}

::google::protobuf::uint8* ProtocolParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.ProtocolParameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional double v0 = 3 [default = -120];
  if (has_v0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v0(), target);
  }

  // optional double temperature = 4 [default = 293];
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // repeated .MarkovChannel.ProtocolStep step = 5;
  for (int i = 0; i < this->step_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->step(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.ProtocolParameter)
  return target;
}

int ProtocolParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional double v0 = 3 [default = -120];
    if (has_v0()) {
      total_size += 1 + 8;
    }

    // optional double temperature = 4 [default = 293];
    if (has_temperature()) {
      total_size += 1 + 8;
    }

  }
  // repeated .MarkovChannel.ProtocolStep step = 5;
  total_size += 1 * this->step_size();
  for (int i = 0; i < this->step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolParameter::MergeFrom(const ProtocolParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_.MergeFrom(from.step_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_v0()) {
      set_v0(from.v0());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolParameter::CopyFrom(const ProtocolParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProtocolParameter::Swap(ProtocolParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(source_, other->source_);
    std::swap(v0_, other->v0_);
    std::swap(temperature_, other->temperature_);
    step_.Swap(&other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolParameter_descriptor_;
  metadata.reflection = ProtocolParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtocolStep_StepType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolStep_StepType_descriptor_;
}
bool ProtocolStep_StepType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtocolStep_StepType ProtocolStep::NONE;
const ProtocolStep_StepType ProtocolStep::PEAK;
const ProtocolStep_StepType ProtocolStep::TAU;
const ProtocolStep_StepType ProtocolStep::TRACE;
const ProtocolStep_StepType ProtocolStep::StepType_MIN;
const ProtocolStep_StepType ProtocolStep::StepType_MAX;
const int ProtocolStep::StepType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtocolStep::kDtFieldNumber;
const int ProtocolStep::kVmFieldNumber;
const int ProtocolStep::kConductanceFieldNumber;
const int ProtocolStep::kFluorimetryFieldNumber;
const int ProtocolStep::kStypeFieldNumber;
const int ProtocolStep::kNormalizeFieldNumber;
const int ProtocolStep::kPrm1FieldNumber;
const int ProtocolStep::kPrm2FieldNumber;
const int ProtocolStep::kStepsizeFieldNumber;
#endif  // !_MSC_VER

ProtocolStep::ProtocolStep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.ProtocolStep)
}

void ProtocolStep::InitAsDefaultInstance() {
}

ProtocolStep::ProtocolStep(const ProtocolStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.ProtocolStep)
}

void ProtocolStep::SharedCtor() {
  _cached_size_ = 0;
  dt_ = 0;
  vm_ = 0;
  conductance_ = false;
  fluorimetry_ = false;
  stype_ = 0;
  normalize_ = true;
  prm1_ = 0.1;
  prm2_ = 0.9;
  stepsize_ = 0.1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolStep::~ProtocolStep() {
  // @@protoc_insertion_point(destructor:MarkovChannel.ProtocolStep)
  SharedDtor();
}

void ProtocolStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtocolStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolStep_descriptor_;
}

const ProtocolStep& ProtocolStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

ProtocolStep* ProtocolStep::default_instance_ = NULL;

ProtocolStep* ProtocolStep::New() const {
  return new ProtocolStep;
}

void ProtocolStep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtocolStep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dt_, fluorimetry_);
    stype_ = 0;
    normalize_ = true;
    prm1_ = 0.1;
    prm2_ = 0.9;
  }
  stepsize_ = 0.1;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.ProtocolStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dt = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_vm;
        break;
      }

      // optional double vm = 2;
      case 2: {
        if (tag == 17) {
         parse_vm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vm_)));
          set_has_vm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_conductance;
        break;
      }

      // optional bool conductance = 3;
      case 3: {
        if (tag == 24) {
         parse_conductance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conductance_)));
          set_has_conductance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fluorimetry;
        break;
      }

      // optional bool fluorimetry = 4;
      case 4: {
        if (tag == 32) {
         parse_fluorimetry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fluorimetry_)));
          set_has_fluorimetry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stype;
        break;
      }

      // optional .MarkovChannel.ProtocolStep.StepType stype = 5 [default = NONE];
      case 5: {
        if (tag == 40) {
         parse_stype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MarkovChannel::ProtocolStep_StepType_IsValid(value)) {
            set_stype(static_cast< ::MarkovChannel::ProtocolStep_StepType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_normalize;
        break;
      }

      // optional bool normalize = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
          set_has_normalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_prm1;
        break;
      }

      // optional double prm1 = 7 [default = 0.1];
      case 7: {
        if (tag == 57) {
         parse_prm1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prm1_)));
          set_has_prm1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_prm2;
        break;
      }

      // optional double prm2 = 8 [default = 0.9];
      case 8: {
        if (tag == 65) {
         parse_prm2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prm2_)));
          set_has_prm2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_stepsize;
        break;
      }

      // optional double stepsize = 9 [default = 0.1];
      case 9: {
        if (tag == 73) {
         parse_stepsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stepsize_)));
          set_has_stepsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.ProtocolStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.ProtocolStep)
  return false;
#undef DO_
}

void ProtocolStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.ProtocolStep)
  // optional double dt = 1;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dt(), output);
  }

  // optional double vm = 2;
  if (has_vm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vm(), output);
  }

  // optional bool conductance = 3;
  if (has_conductance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->conductance(), output);
  }

  // optional bool fluorimetry = 4;
  if (has_fluorimetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fluorimetry(), output);
  }

  // optional .MarkovChannel.ProtocolStep.StepType stype = 5 [default = NONE];
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->stype(), output);
  }

  // optional bool normalize = 6 [default = true];
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->normalize(), output);
  }

  // optional double prm1 = 7 [default = 0.1];
  if (has_prm1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prm1(), output);
  }

  // optional double prm2 = 8 [default = 0.9];
  if (has_prm2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->prm2(), output);
  }

  // optional double stepsize = 9 [default = 0.1];
  if (has_stepsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->stepsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.ProtocolStep)
}

::google::protobuf::uint8* ProtocolStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.ProtocolStep)
  // optional double dt = 1;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dt(), target);
  }

  // optional double vm = 2;
  if (has_vm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vm(), target);
  }

  // optional bool conductance = 3;
  if (has_conductance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->conductance(), target);
  }

  // optional bool fluorimetry = 4;
  if (has_fluorimetry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fluorimetry(), target);
  }

  // optional .MarkovChannel.ProtocolStep.StepType stype = 5 [default = NONE];
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->stype(), target);
  }

  // optional bool normalize = 6 [default = true];
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->normalize(), target);
  }

  // optional double prm1 = 7 [default = 0.1];
  if (has_prm1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prm1(), target);
  }

  // optional double prm2 = 8 [default = 0.9];
  if (has_prm2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->prm2(), target);
  }

  // optional double stepsize = 9 [default = 0.1];
  if (has_stepsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->stepsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.ProtocolStep)
  return target;
}

int ProtocolStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dt = 1;
    if (has_dt()) {
      total_size += 1 + 8;
    }

    // optional double vm = 2;
    if (has_vm()) {
      total_size += 1 + 8;
    }

    // optional bool conductance = 3;
    if (has_conductance()) {
      total_size += 1 + 1;
    }

    // optional bool fluorimetry = 4;
    if (has_fluorimetry()) {
      total_size += 1 + 1;
    }

    // optional .MarkovChannel.ProtocolStep.StepType stype = 5 [default = NONE];
    if (has_stype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stype());
    }

    // optional bool normalize = 6 [default = true];
    if (has_normalize()) {
      total_size += 1 + 1;
    }

    // optional double prm1 = 7 [default = 0.1];
    if (has_prm1()) {
      total_size += 1 + 8;
    }

    // optional double prm2 = 8 [default = 0.9];
    if (has_prm2()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double stepsize = 9 [default = 0.1];
    if (has_stepsize()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolStep::MergeFrom(const ProtocolStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_vm()) {
      set_vm(from.vm());
    }
    if (from.has_conductance()) {
      set_conductance(from.conductance());
    }
    if (from.has_fluorimetry()) {
      set_fluorimetry(from.fluorimetry());
    }
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
    if (from.has_prm1()) {
      set_prm1(from.prm1());
    }
    if (from.has_prm2()) {
      set_prm2(from.prm2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stepsize()) {
      set_stepsize(from.stepsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolStep::CopyFrom(const ProtocolStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolStep::IsInitialized() const {

  return true;
}

void ProtocolStep::Swap(ProtocolStep* other) {
  if (other != this) {
    std::swap(dt_, other->dt_);
    std::swap(vm_, other->vm_);
    std::swap(conductance_, other->conductance_);
    std::swap(fluorimetry_, other->fluorimetry_);
    std::swap(stype_, other->stype_);
    std::swap(normalize_, other->normalize_);
    std::swap(prm1_, other->prm1_);
    std::swap(prm2_, other->prm2_);
    std::swap(stepsize_, other->stepsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolStep_descriptor_;
  metadata.reflection = ProtocolStep_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SolverMode_descriptor_;
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_SolverMode SolverParameter::GENETIC_ALGORITHM;
const SolverParameter_SolverMode SolverParameter::SIMULATED_ANNEALING;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SolverParameter_SimulationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_SimulationMode_descriptor_;
}
bool SolverParameter_SimulationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolverParameter_SimulationMode SolverParameter::ODE;
const SolverParameter_SimulationMode SolverParameter::EXPM;
const SolverParameter_SimulationMode SolverParameter::SimulationMode_MIN;
const SolverParameter_SimulationMode SolverParameter::SimulationMode_MAX;
const int SolverParameter::SimulationMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kSimulationModeFieldNumber;
const int SolverParameter::kModelParamFieldNumber;
const int SolverParameter::kMaxItersFieldNumber;
const int SolverParameter::kGaParamFieldNumber;
const int SolverParameter::kSaParamFieldNumber;
#endif  // !_MSC_VER

SolverParameter::SolverParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.SolverParameter)
}

void SolverParameter::InitAsDefaultInstance() {
  model_param_ = const_cast< ::MarkovChannel::ModelParameter*>(&::MarkovChannel::ModelParameter::default_instance());
  ga_param_ = const_cast< ::MarkovChannel::GAParameter*>(&::MarkovChannel::GAParameter::default_instance());
  sa_param_ = const_cast< ::MarkovChannel::SAParameter*>(&::MarkovChannel::SAParameter::default_instance());
}

SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.SolverParameter)
}

void SolverParameter::SharedCtor() {
  _cached_size_ = 0;
  solver_mode_ = 0;
  simulation_mode_ = 0;
  model_param_ = NULL;
  max_iters_ = 10000;
  ga_param_ = NULL;
  sa_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  if (this != default_instance_) {
    delete model_param_;
    delete ga_param_;
    delete sa_param_;
  }
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParameter_descriptor_;
}

const SolverParameter& SolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

SolverParameter* SolverParameter::default_instance_ = NULL;

SolverParameter* SolverParameter::New() const {
  return new SolverParameter;
}

void SolverParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(solver_mode_, simulation_mode_);
    if (has_model_param()) {
      if (model_param_ != NULL) model_param_->::MarkovChannel::ModelParameter::Clear();
    }
    max_iters_ = 10000;
    if (has_ga_param()) {
      if (ga_param_ != NULL) ga_param_->::MarkovChannel::GAParameter::Clear();
    }
    if (has_sa_param()) {
      if (sa_param_ != NULL) sa_param_->::MarkovChannel::SAParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MarkovChannel.SolverParameter.SolverMode solver_mode = 1 [default = GENETIC_ALGORITHM];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MarkovChannel::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::MarkovChannel::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_simulation_mode;
        break;
      }

      // optional .MarkovChannel.SolverParameter.SimulationMode simulation_mode = 2 [default = ODE];
      case 2: {
        if (tag == 16) {
         parse_simulation_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MarkovChannel::SolverParameter_SimulationMode_IsValid(value)) {
            set_simulation_mode(static_cast< ::MarkovChannel::SolverParameter_SimulationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model_param;
        break;
      }

      // required .MarkovChannel.ModelParameter model_param = 3;
      case 3: {
        if (tag == 26) {
         parse_model_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_iters;
        break;
      }

      // optional int32 max_iters = 4 [default = 10000];
      case 4: {
        if (tag == 32) {
         parse_max_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iters_)));
          set_has_max_iters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ga_param;
        break;
      }

      // optional .MarkovChannel.GAParameter ga_param = 5;
      case 5: {
        if (tag == 42) {
         parse_ga_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ga_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sa_param;
        break;
      }

      // optional .MarkovChannel.SAParameter sa_param = 6;
      case 6: {
        if (tag == 50) {
         parse_sa_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sa_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.SolverParameter)
  // optional .MarkovChannel.SolverParameter.SolverMode solver_mode = 1 [default = GENETIC_ALGORITHM];
  if (has_solver_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->solver_mode(), output);
  }

  // optional .MarkovChannel.SolverParameter.SimulationMode simulation_mode = 2 [default = ODE];
  if (has_simulation_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->simulation_mode(), output);
  }

  // required .MarkovChannel.ModelParameter model_param = 3;
  if (has_model_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->model_param(), output);
  }

  // optional int32 max_iters = 4 [default = 10000];
  if (has_max_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_iters(), output);
  }

  // optional .MarkovChannel.GAParameter ga_param = 5;
  if (has_ga_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ga_param(), output);
  }

  // optional .MarkovChannel.SAParameter sa_param = 6;
  if (has_sa_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sa_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.SolverParameter)
  // optional .MarkovChannel.SolverParameter.SolverMode solver_mode = 1 [default = GENETIC_ALGORITHM];
  if (has_solver_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->solver_mode(), target);
  }

  // optional .MarkovChannel.SolverParameter.SimulationMode simulation_mode = 2 [default = ODE];
  if (has_simulation_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->simulation_mode(), target);
  }

  // required .MarkovChannel.ModelParameter model_param = 3;
  if (has_model_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->model_param(), target);
  }

  // optional int32 max_iters = 4 [default = 10000];
  if (has_max_iters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_iters(), target);
  }

  // optional .MarkovChannel.GAParameter ga_param = 5;
  if (has_ga_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ga_param(), target);
  }

  // optional .MarkovChannel.SAParameter sa_param = 6;
  if (has_sa_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sa_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.SolverParameter)
  return target;
}

int SolverParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MarkovChannel.SolverParameter.SolverMode solver_mode = 1 [default = GENETIC_ALGORITHM];
    if (has_solver_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional .MarkovChannel.SolverParameter.SimulationMode simulation_mode = 2 [default = ODE];
    if (has_simulation_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->simulation_mode());
    }

    // required .MarkovChannel.ModelParameter model_param = 3;
    if (has_model_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_param());
    }

    // optional int32 max_iters = 4 [default = 10000];
    if (has_max_iters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iters());
    }

    // optional .MarkovChannel.GAParameter ga_param = 5;
    if (has_ga_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ga_param());
    }

    // optional .MarkovChannel.SAParameter sa_param = 6;
    if (has_sa_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sa_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_solver_mode()) {
      set_solver_mode(from.solver_mode());
    }
    if (from.has_simulation_mode()) {
      set_simulation_mode(from.simulation_mode());
    }
    if (from.has_model_param()) {
      mutable_model_param()->::MarkovChannel::ModelParameter::MergeFrom(from.model_param());
    }
    if (from.has_max_iters()) {
      set_max_iters(from.max_iters());
    }
    if (from.has_ga_param()) {
      mutable_ga_param()->::MarkovChannel::GAParameter::MergeFrom(from.ga_param());
    }
    if (from.has_sa_param()) {
      mutable_sa_param()->::MarkovChannel::SAParameter::MergeFrom(from.sa_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_model_param()) {
    if (!this->model_param().IsInitialized()) return false;
  }
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other != this) {
    std::swap(solver_mode_, other->solver_mode_);
    std::swap(simulation_mode_, other->simulation_mode_);
    std::swap(model_param_, other->model_param_);
    std::swap(max_iters_, other->max_iters_);
    std::swap(ga_param_, other->ga_param_);
    std::swap(sa_param_, other->sa_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParameter_descriptor_;
  metadata.reflection = SolverParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelParameter::kMinStatesFieldNumber;
const int ModelParameter::kMaxStatesFieldNumber;
const int ModelParameter::kNPrmsFieldNumber;
const int ModelParameter::kMuFieldNumber;
const int ModelParameter::kStdFieldNumber;
const int ModelParameter::kMutationFieldNumber;
#endif  // !_MSC_VER

ModelParameter::ModelParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.ModelParameter)
}

void ModelParameter::InitAsDefaultInstance() {
  mutation_ = const_cast< ::MarkovChannel::MutationParameter*>(&::MarkovChannel::MutationParameter::default_instance());
}

ModelParameter::ModelParameter(const ModelParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.ModelParameter)
}

void ModelParameter::SharedCtor() {
  _cached_size_ = 0;
  min_states_ = 3;
  max_states_ = 10;
  n_prms_ = 2;
  mu_ = 0;
  std_ = 1;
  mutation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelParameter::~ModelParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.ModelParameter)
  SharedDtor();
}

void ModelParameter::SharedDtor() {
  if (this != default_instance_) {
    delete mutation_;
  }
}

void ModelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParameter_descriptor_;
}

const ModelParameter& ModelParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

ModelParameter* ModelParameter::default_instance_ = NULL;

ModelParameter* ModelParameter::New() const {
  return new ModelParameter;
}

void ModelParameter::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    min_states_ = 3;
    max_states_ = 10;
    n_prms_ = 2;
    mu_ = 0;
    std_ = 1;
    if (has_mutation()) {
      if (mutation_ != NULL) mutation_->::MarkovChannel::MutationParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.ModelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_states = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_states_)));
          set_has_min_states();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_states;
        break;
      }

      // optional int32 max_states = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_max_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_states_)));
          set_has_max_states();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_n_prms;
        break;
      }

      // optional int32 n_prms = 3 [default = 2];
      case 3: {
        if (tag == 24) {
         parse_n_prms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_prms_)));
          set_has_n_prms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_mu;
        break;
      }

      // optional double mu = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_std;
        break;
      }

      // optional double std = 5 [default = 1];
      case 5: {
        if (tag == 41) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mutation;
        break;
      }

      // required .MarkovChannel.MutationParameter mutation = 6;
      case 6: {
        if (tag == 50) {
         parse_mutation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mutation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.ModelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.ModelParameter)
  return false;
#undef DO_
}

void ModelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.ModelParameter)
  // optional int32 min_states = 1 [default = 3];
  if (has_min_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_states(), output);
  }

  // optional int32 max_states = 2 [default = 10];
  if (has_max_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_states(), output);
  }

  // optional int32 n_prms = 3 [default = 2];
  if (has_n_prms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->n_prms(), output);
  }

  // optional double mu = 4 [default = 0];
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mu(), output);
  }

  // optional double std = 5 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->std(), output);
  }

  // required .MarkovChannel.MutationParameter mutation = 6;
  if (has_mutation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mutation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.ModelParameter)
}

::google::protobuf::uint8* ModelParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.ModelParameter)
  // optional int32 min_states = 1 [default = 3];
  if (has_min_states()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_states(), target);
  }

  // optional int32 max_states = 2 [default = 10];
  if (has_max_states()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_states(), target);
  }

  // optional int32 n_prms = 3 [default = 2];
  if (has_n_prms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->n_prms(), target);
  }

  // optional double mu = 4 [default = 0];
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mu(), target);
  }

  // optional double std = 5 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->std(), target);
  }

  // required .MarkovChannel.MutationParameter mutation = 6;
  if (has_mutation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mutation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.ModelParameter)
  return target;
}

int ModelParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 min_states = 1 [default = 3];
    if (has_min_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_states());
    }

    // optional int32 max_states = 2 [default = 10];
    if (has_max_states()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_states());
    }

    // optional int32 n_prms = 3 [default = 2];
    if (has_n_prms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_prms());
    }

    // optional double mu = 4 [default = 0];
    if (has_mu()) {
      total_size += 1 + 8;
    }

    // optional double std = 5 [default = 1];
    if (has_std()) {
      total_size += 1 + 8;
    }

    // required .MarkovChannel.MutationParameter mutation = 6;
    if (has_mutation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelParameter::MergeFrom(const ModelParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_states()) {
      set_min_states(from.min_states());
    }
    if (from.has_max_states()) {
      set_max_states(from.max_states());
    }
    if (from.has_n_prms()) {
      set_n_prms(from.n_prms());
    }
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_mutation()) {
      mutable_mutation()->::MarkovChannel::MutationParameter::MergeFrom(from.mutation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParameter::CopyFrom(const ModelParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void ModelParameter::Swap(ModelParameter* other) {
  if (other != this) {
    std::swap(min_states_, other->min_states_);
    std::swap(max_states_, other->max_states_);
    std::swap(n_prms_, other->n_prms_);
    std::swap(mu_, other->mu_);
    std::swap(std_, other->std_);
    std::swap(mutation_, other->mutation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelParameter_descriptor_;
  metadata.reflection = ModelParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutationParameter::kAddEdgeFieldNumber;
const int MutationParameter::kAddNodeFieldNumber;
const int MutationParameter::kRmEdgeFieldNumber;
const int MutationParameter::kRmNodeFieldNumber;
const int MutationParameter::kStdFieldNumber;
#endif  // !_MSC_VER

MutationParameter::MutationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.MutationParameter)
}

void MutationParameter::InitAsDefaultInstance() {
}

MutationParameter::MutationParameter(const MutationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.MutationParameter)
}

void MutationParameter::SharedCtor() {
  _cached_size_ = 0;
  add_edge_ = 0;
  add_node_ = 0;
  rm_edge_ = 0;
  rm_node_ = 0;
  std_ = 0.1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutationParameter::~MutationParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.MutationParameter)
  SharedDtor();
}

void MutationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MutationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutationParameter_descriptor_;
}

const MutationParameter& MutationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

MutationParameter* MutationParameter::default_instance_ = NULL;

MutationParameter* MutationParameter::New() const {
  return new MutationParameter;
}

void MutationParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MutationParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(add_edge_, rm_node_);
    std_ = 0.1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.MutationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double add_edge = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_edge_)));
          set_has_add_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_add_node;
        break;
      }

      // optional double add_node = 2;
      case 2: {
        if (tag == 17) {
         parse_add_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_node_)));
          set_has_add_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rm_edge;
        break;
      }

      // optional double rm_edge = 3;
      case 3: {
        if (tag == 25) {
         parse_rm_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rm_edge_)));
          set_has_rm_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rm_node;
        break;
      }

      // optional double rm_node = 4;
      case 4: {
        if (tag == 33) {
         parse_rm_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rm_node_)));
          set_has_rm_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_std;
        break;
      }

      // optional double std = 5 [default = 0.1];
      case 5: {
        if (tag == 41) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.MutationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.MutationParameter)
  return false;
#undef DO_
}

void MutationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.MutationParameter)
  // optional double add_edge = 1;
  if (has_add_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->add_edge(), output);
  }

  // optional double add_node = 2;
  if (has_add_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->add_node(), output);
  }

  // optional double rm_edge = 3;
  if (has_rm_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rm_edge(), output);
  }

  // optional double rm_node = 4;
  if (has_rm_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rm_node(), output);
  }

  // optional double std = 5 [default = 0.1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->std(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.MutationParameter)
}

::google::protobuf::uint8* MutationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.MutationParameter)
  // optional double add_edge = 1;
  if (has_add_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->add_edge(), target);
  }

  // optional double add_node = 2;
  if (has_add_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->add_node(), target);
  }

  // optional double rm_edge = 3;
  if (has_rm_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rm_edge(), target);
  }

  // optional double rm_node = 4;
  if (has_rm_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rm_node(), target);
  }

  // optional double std = 5 [default = 0.1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->std(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.MutationParameter)
  return target;
}

int MutationParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double add_edge = 1;
    if (has_add_edge()) {
      total_size += 1 + 8;
    }

    // optional double add_node = 2;
    if (has_add_node()) {
      total_size += 1 + 8;
    }

    // optional double rm_edge = 3;
    if (has_rm_edge()) {
      total_size += 1 + 8;
    }

    // optional double rm_node = 4;
    if (has_rm_node()) {
      total_size += 1 + 8;
    }

    // optional double std = 5 [default = 0.1];
    if (has_std()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutationParameter::MergeFrom(const MutationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_edge()) {
      set_add_edge(from.add_edge());
    }
    if (from.has_add_node()) {
      set_add_node(from.add_node());
    }
    if (from.has_rm_edge()) {
      set_rm_edge(from.rm_edge());
    }
    if (from.has_rm_node()) {
      set_rm_node(from.rm_node());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationParameter::CopyFrom(const MutationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationParameter::IsInitialized() const {

  return true;
}

void MutationParameter::Swap(MutationParameter* other) {
  if (other != this) {
    std::swap(add_edge_, other->add_edge_);
    std::swap(add_node_, other->add_node_);
    std::swap(rm_edge_, other->rm_edge_);
    std::swap(rm_node_, other->rm_node_);
    std::swap(std_, other->std_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutationParameter_descriptor_;
  metadata.reflection = MutationParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GAParameter_SelectionMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAParameter_SelectionMode_descriptor_;
}
bool GAParameter_SelectionMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GAParameter_SelectionMode GAParameter::TOURNAMENT;
const GAParameter_SelectionMode GAParameter::PROPORTIONATE;
const GAParameter_SelectionMode GAParameter::STOCHASTIC;
const GAParameter_SelectionMode GAParameter::UNIFORM;
const GAParameter_SelectionMode GAParameter::ROULETTE;
const GAParameter_SelectionMode GAParameter::RANK;
const GAParameter_SelectionMode GAParameter::SelectionMode_MIN;
const GAParameter_SelectionMode GAParameter::SelectionMode_MAX;
const int GAParameter::SelectionMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GAParameter::kNSubpopulationsFieldNumber;
const int GAParameter::kPopulationSizeFieldNumber;
const int GAParameter::kMigrationRateFieldNumber;
const int GAParameter::kReproductionRateFieldNumber;
const int GAParameter::kSelectionModeFieldNumber;
const int GAParameter::kMutationParamFieldNumber;
#endif  // !_MSC_VER

GAParameter::GAParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.GAParameter)
}

void GAParameter::InitAsDefaultInstance() {
  mutation_param_ = const_cast< ::MarkovChannel::TransitionParameter*>(&::MarkovChannel::TransitionParameter::default_instance());
}

GAParameter::GAParameter(const GAParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.GAParameter)
}

void GAParameter::SharedCtor() {
  _cached_size_ = 0;
  n_subpopulations_ = 8;
  population_size_ = 100;
  migration_rate_ = 0.01;
  reproduction_rate_ = 0.5;
  selection_mode_ = 0;
  mutation_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GAParameter::~GAParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.GAParameter)
  SharedDtor();
}

void GAParameter::SharedDtor() {
  if (this != default_instance_) {
    delete mutation_param_;
  }
}

void GAParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GAParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAParameter_descriptor_;
}

const GAParameter& GAParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

GAParameter* GAParameter::default_instance_ = NULL;

GAParameter* GAParameter::New() const {
  return new GAParameter;
}

void GAParameter::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    n_subpopulations_ = 8;
    population_size_ = 100;
    migration_rate_ = 0.01;
    reproduction_rate_ = 0.5;
    selection_mode_ = 0;
    if (has_mutation_param()) {
      if (mutation_param_ != NULL) mutation_param_->::MarkovChannel::TransitionParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GAParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.GAParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 n_subpopulations = 1 [default = 8];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_subpopulations_)));
          set_has_n_subpopulations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_population_size;
        break;
      }

      // optional int32 population_size = 2 [default = 100];
      case 2: {
        if (tag == 16) {
         parse_population_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &population_size_)));
          set_has_population_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_migration_rate;
        break;
      }

      // optional double migration_rate = 3 [default = 0.01];
      case 3: {
        if (tag == 25) {
         parse_migration_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &migration_rate_)));
          set_has_migration_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_reproduction_rate;
        break;
      }

      // optional double reproduction_rate = 4 [default = 0.5];
      case 4: {
        if (tag == 33) {
         parse_reproduction_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reproduction_rate_)));
          set_has_reproduction_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_selection_mode;
        break;
      }

      // optional .MarkovChannel.GAParameter.SelectionMode selection_mode = 5 [default = TOURNAMENT];
      case 5: {
        if (tag == 40) {
         parse_selection_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MarkovChannel::GAParameter_SelectionMode_IsValid(value)) {
            set_selection_mode(static_cast< ::MarkovChannel::GAParameter_SelectionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mutation_param;
        break;
      }

      // optional .MarkovChannel.TransitionParameter mutation_param = 6;
      case 6: {
        if (tag == 50) {
         parse_mutation_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mutation_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.GAParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.GAParameter)
  return false;
#undef DO_
}

void GAParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.GAParameter)
  // optional int32 n_subpopulations = 1 [default = 8];
  if (has_n_subpopulations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n_subpopulations(), output);
  }

  // optional int32 population_size = 2 [default = 100];
  if (has_population_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->population_size(), output);
  }

  // optional double migration_rate = 3 [default = 0.01];
  if (has_migration_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->migration_rate(), output);
  }

  // optional double reproduction_rate = 4 [default = 0.5];
  if (has_reproduction_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->reproduction_rate(), output);
  }

  // optional .MarkovChannel.GAParameter.SelectionMode selection_mode = 5 [default = TOURNAMENT];
  if (has_selection_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->selection_mode(), output);
  }

  // optional .MarkovChannel.TransitionParameter mutation_param = 6;
  if (has_mutation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mutation_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.GAParameter)
}

::google::protobuf::uint8* GAParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.GAParameter)
  // optional int32 n_subpopulations = 1 [default = 8];
  if (has_n_subpopulations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n_subpopulations(), target);
  }

  // optional int32 population_size = 2 [default = 100];
  if (has_population_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->population_size(), target);
  }

  // optional double migration_rate = 3 [default = 0.01];
  if (has_migration_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->migration_rate(), target);
  }

  // optional double reproduction_rate = 4 [default = 0.5];
  if (has_reproduction_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->reproduction_rate(), target);
  }

  // optional .MarkovChannel.GAParameter.SelectionMode selection_mode = 5 [default = TOURNAMENT];
  if (has_selection_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->selection_mode(), target);
  }

  // optional .MarkovChannel.TransitionParameter mutation_param = 6;
  if (has_mutation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mutation_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.GAParameter)
  return target;
}

int GAParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 n_subpopulations = 1 [default = 8];
    if (has_n_subpopulations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_subpopulations());
    }

    // optional int32 population_size = 2 [default = 100];
    if (has_population_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population_size());
    }

    // optional double migration_rate = 3 [default = 0.01];
    if (has_migration_rate()) {
      total_size += 1 + 8;
    }

    // optional double reproduction_rate = 4 [default = 0.5];
    if (has_reproduction_rate()) {
      total_size += 1 + 8;
    }

    // optional .MarkovChannel.GAParameter.SelectionMode selection_mode = 5 [default = TOURNAMENT];
    if (has_selection_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional .MarkovChannel.TransitionParameter mutation_param = 6;
    if (has_mutation_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GAParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GAParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GAParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GAParameter::MergeFrom(const GAParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_subpopulations()) {
      set_n_subpopulations(from.n_subpopulations());
    }
    if (from.has_population_size()) {
      set_population_size(from.population_size());
    }
    if (from.has_migration_rate()) {
      set_migration_rate(from.migration_rate());
    }
    if (from.has_reproduction_rate()) {
      set_reproduction_rate(from.reproduction_rate());
    }
    if (from.has_selection_mode()) {
      set_selection_mode(from.selection_mode());
    }
    if (from.has_mutation_param()) {
      mutable_mutation_param()->::MarkovChannel::TransitionParameter::MergeFrom(from.mutation_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GAParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GAParameter::CopyFrom(const GAParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GAParameter::IsInitialized() const {

  return true;
}

void GAParameter::Swap(GAParameter* other) {
  if (other != this) {
    std::swap(n_subpopulations_, other->n_subpopulations_);
    std::swap(population_size_, other->population_size_);
    std::swap(migration_rate_, other->migration_rate_);
    std::swap(reproduction_rate_, other->reproduction_rate_);
    std::swap(selection_mode_, other->selection_mode_);
    std::swap(mutation_param_, other->mutation_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GAParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GAParameter_descriptor_;
  metadata.reflection = GAParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SAParameter::kKMaxFieldNumber;
const int SAParameter::kGammaFieldNumber;
const int SAParameter::kTransitionParamFieldNumber;
#endif  // !_MSC_VER

SAParameter::SAParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.SAParameter)
}

void SAParameter::InitAsDefaultInstance() {
  transition_param_ = const_cast< ::MarkovChannel::TransitionParameter*>(&::MarkovChannel::TransitionParameter::default_instance());
}

SAParameter::SAParameter(const SAParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.SAParameter)
}

void SAParameter::SharedCtor() {
  _cached_size_ = 0;
  k_max_ = 100;
  gamma_ = 0.01;
  transition_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SAParameter::~SAParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.SAParameter)
  SharedDtor();
}

void SAParameter::SharedDtor() {
  if (this != default_instance_) {
    delete transition_param_;
  }
}

void SAParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SAParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SAParameter_descriptor_;
}

const SAParameter& SAParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

SAParameter* SAParameter::default_instance_ = NULL;

SAParameter* SAParameter::New() const {
  return new SAParameter;
}

void SAParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    k_max_ = 100;
    gamma_ = 0.01;
    if (has_transition_param()) {
      if (transition_param_ != NULL) transition_param_->::MarkovChannel::TransitionParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SAParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.SAParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 k_max = 1 [default = 100];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_max_)));
          set_has_k_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gamma;
        break;
      }

      // optional double gamma = 2 [default = 0.01];
      case 2: {
        if (tag == 17) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transition_param;
        break;
      }

      // optional .MarkovChannel.TransitionParameter transition_param = 3;
      case 3: {
        if (tag == 26) {
         parse_transition_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.SAParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.SAParameter)
  return false;
#undef DO_
}

void SAParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.SAParameter)
  // optional int32 k_max = 1 [default = 100];
  if (has_k_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k_max(), output);
  }

  // optional double gamma = 2 [default = 0.01];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gamma(), output);
  }

  // optional .MarkovChannel.TransitionParameter transition_param = 3;
  if (has_transition_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transition_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.SAParameter)
}

::google::protobuf::uint8* SAParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.SAParameter)
  // optional int32 k_max = 1 [default = 100];
  if (has_k_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k_max(), target);
  }

  // optional double gamma = 2 [default = 0.01];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gamma(), target);
  }

  // optional .MarkovChannel.TransitionParameter transition_param = 3;
  if (has_transition_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transition_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.SAParameter)
  return target;
}

int SAParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 k_max = 1 [default = 100];
    if (has_k_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_max());
    }

    // optional double gamma = 2 [default = 0.01];
    if (has_gamma()) {
      total_size += 1 + 8;
    }

    // optional .MarkovChannel.TransitionParameter transition_param = 3;
    if (has_transition_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SAParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SAParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SAParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SAParameter::MergeFrom(const SAParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k_max()) {
      set_k_max(from.k_max());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_transition_param()) {
      mutable_transition_param()->::MarkovChannel::TransitionParameter::MergeFrom(from.transition_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SAParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAParameter::CopyFrom(const SAParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAParameter::IsInitialized() const {

  return true;
}

void SAParameter::Swap(SAParameter* other) {
  if (other != this) {
    std::swap(k_max_, other->k_max_);
    std::swap(gamma_, other->gamma_);
    std::swap(transition_param_, other->transition_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SAParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SAParameter_descriptor_;
  metadata.reflection = SAParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransitionParameter::kAddStateFieldNumber;
const int TransitionParameter::kAddEdgeFieldNumber;
const int TransitionParameter::kRemoveEdgeFieldNumber;
const int TransitionParameter::kShiftParamsFieldNumber;
const int TransitionParameter::kFixedModelFieldNumber;
#endif  // !_MSC_VER

TransitionParameter::TransitionParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarkovChannel.TransitionParameter)
}

void TransitionParameter::InitAsDefaultInstance() {
}

TransitionParameter::TransitionParameter(const TransitionParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarkovChannel.TransitionParameter)
}

void TransitionParameter::SharedCtor() {
  _cached_size_ = 0;
  add_state_ = 0;
  add_edge_ = 0;
  remove_edge_ = 0;
  shift_params_ = 0;
  fixed_model_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitionParameter::~TransitionParameter() {
  // @@protoc_insertion_point(destructor:MarkovChannel.TransitionParameter)
  SharedDtor();
}

void TransitionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransitionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransitionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionParameter_descriptor_;
}

const TransitionParameter& TransitionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarkovChannel_2eproto();
  return *default_instance_;
}

TransitionParameter* TransitionParameter::default_instance_ = NULL;

TransitionParameter* TransitionParameter::New() const {
  return new TransitionParameter;
}

void TransitionParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransitionParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(add_state_, fixed_model_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransitionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarkovChannel.TransitionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double add_state = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_state_)));
          set_has_add_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_add_edge;
        break;
      }

      // optional double add_edge = 2;
      case 2: {
        if (tag == 17) {
         parse_add_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_edge_)));
          set_has_add_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_remove_edge;
        break;
      }

      // optional double remove_edge = 3;
      case 3: {
        if (tag == 25) {
         parse_remove_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remove_edge_)));
          set_has_remove_edge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_shift_params;
        break;
      }

      // optional double shift_params = 4;
      case 4: {
        if (tag == 33) {
         parse_shift_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shift_params_)));
          set_has_shift_params();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fixed_model;
        break;
      }

      // optional bool fixed_model = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_fixed_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_model_)));
          set_has_fixed_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarkovChannel.TransitionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarkovChannel.TransitionParameter)
  return false;
#undef DO_
}

void TransitionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarkovChannel.TransitionParameter)
  // optional double add_state = 1;
  if (has_add_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->add_state(), output);
  }

  // optional double add_edge = 2;
  if (has_add_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->add_edge(), output);
  }

  // optional double remove_edge = 3;
  if (has_remove_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->remove_edge(), output);
  }

  // optional double shift_params = 4;
  if (has_shift_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->shift_params(), output);
  }

  // optional bool fixed_model = 5 [default = false];
  if (has_fixed_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fixed_model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarkovChannel.TransitionParameter)
}

::google::protobuf::uint8* TransitionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarkovChannel.TransitionParameter)
  // optional double add_state = 1;
  if (has_add_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->add_state(), target);
  }

  // optional double add_edge = 2;
  if (has_add_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->add_edge(), target);
  }

  // optional double remove_edge = 3;
  if (has_remove_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->remove_edge(), target);
  }

  // optional double shift_params = 4;
  if (has_shift_params()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->shift_params(), target);
  }

  // optional bool fixed_model = 5 [default = false];
  if (has_fixed_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fixed_model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarkovChannel.TransitionParameter)
  return target;
}

int TransitionParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double add_state = 1;
    if (has_add_state()) {
      total_size += 1 + 8;
    }

    // optional double add_edge = 2;
    if (has_add_edge()) {
      total_size += 1 + 8;
    }

    // optional double remove_edge = 3;
    if (has_remove_edge()) {
      total_size += 1 + 8;
    }

    // optional double shift_params = 4;
    if (has_shift_params()) {
      total_size += 1 + 8;
    }

    // optional bool fixed_model = 5 [default = false];
    if (has_fixed_model()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransitionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransitionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransitionParameter::MergeFrom(const TransitionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_state()) {
      set_add_state(from.add_state());
    }
    if (from.has_add_edge()) {
      set_add_edge(from.add_edge());
    }
    if (from.has_remove_edge()) {
      set_remove_edge(from.remove_edge());
    }
    if (from.has_shift_params()) {
      set_shift_params(from.shift_params());
    }
    if (from.has_fixed_model()) {
      set_fixed_model(from.fixed_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransitionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionParameter::CopyFrom(const TransitionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionParameter::IsInitialized() const {

  return true;
}

void TransitionParameter::Swap(TransitionParameter* other) {
  if (other != this) {
    std::swap(add_state_, other->add_state_);
    std::swap(add_edge_, other->add_edge_);
    std::swap(remove_edge_, other->remove_edge_);
    std::swap(shift_params_, other->shift_params_);
    std::swap(fixed_model_, other->fixed_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransitionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransitionParameter_descriptor_;
  metadata.reflection = TransitionParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarkovChannel

// @@protoc_insertion_point(global_scope)
